// Code generated by 'go generate'; DO NOT EDIT.

package windows

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	kernel32 = syscall.NewLazyDLL("kernel32.dll")
	user32   = syscall.NewLazyDLL("user32.dll")

	__CloseHandle              = kernel32.NewProc("CloseHandle")
	__CreateToolhelp32Snapshot = kernel32.NewProc("CreateToolhelp32Snapshot")
	__GetLastError             = kernel32.NewProc("GetLastError")
	__LoadLibraryA             = kernel32.NewProc("LoadLibraryA")
	__LoadLibraryExA           = kernel32.NewProc("LoadLibraryExA")
	__LoadLibraryExW           = kernel32.NewProc("LoadLibraryExW")
	__LoadLibraryW             = kernel32.NewProc("LoadLibraryW")
	__SetThreadExecutionState  = kernel32.NewProc("SetThreadExecutionState")
	__FindWindowA              = user32.NewProc("FindWindowA")
	__FindWindowExA            = user32.NewProc("FindWindowExA")
	__FindWindowExW            = user32.NewProc("FindWindowExW")
	__FindWindowW              = user32.NewProc("FindWindowW")
	__GetClassNameA            = user32.NewProc("GetClassNameA")
	__GetClassNameW            = user32.NewProc("GetClassNameW")
	__GetTopWindow             = user32.NewProc("GetTopWindow")
	__GetWindow                = user32.NewProc("GetWindow")
	__GetWindowTextA           = user32.NewProc("GetWindowTextA")
	__GetWindowTextLength      = user32.NewProc("GetWindowTextLength")
	__GetWindowTextW           = user32.NewProc("GetWindowTextW")
	__GetWindowThreadProcessId = user32.NewProc("GetWindowThreadProcessId")
	__IsWindowVisible          = user32.NewProc("IsWindowVisible")
	__MessageBoxA              = user32.NewProc("MessageBoxA")
	__MessageBoxW              = user32.NewProc("MessageBoxW")
	__PostMessageA             = user32.NewProc("PostMessageA")
	__PostMessageW             = user32.NewProc("PostMessageW")
	__SendMessageA             = user32.NewProc("SendMessageA")
	__SendMessageW             = user32.NewProc("SendMessageW")
	__SetForegroundWindow      = user32.NewProc("SetForegroundWindow")
	__ShowWindow               = user32.NewProc("ShowWindow")
)

func _CloseHandle(handle HANDLE) (err error) {
	r1, _, e1 := syscall.Syscall(__CloseHandle.Addr(), 1, uintptr(handle), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func _CreateToolhelp32Snapshot(flags uint32, processId uint32) (handle HANDLE, err error) {
	r0, _, e1 := syscall.Syscall(__CreateToolhelp32Snapshot.Addr(), 2, uintptr(flags), uintptr(processId), 0)
	handle = HANDLE(r0)
	if handle == InvalidHandle {
		err = errnoErr(e1)
	}
	return
}

func _GetLastError() (lasterr error) {
	r0, _, _ := syscall.Syscall(__GetLastError.Addr(), 0, 0, 0, 0)
	if r0 != 0 {
		lasterr = syscall.Errno(r0)
	}
	return
}

func _LoadLibraryA(libname *byte) (handle HANDLE, err error) {
	r0, _, e1 := syscall.Syscall(__LoadLibraryA.Addr(), 1, uintptr(unsafe.Pointer(libname)), 0, 0)
	handle = HANDLE(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func _LoadLibraryExA(libname *byte, zero HANDLE, flags uintptr) (handle HANDLE, err error) {
	r0, _, e1 := syscall.Syscall(__LoadLibraryExA.Addr(), 3, uintptr(unsafe.Pointer(libname)), uintptr(zero), uintptr(flags))
	handle = HANDLE(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func _LoadLibraryExW(libname *uint16, zero HANDLE, flags uintptr) (handle HANDLE, err error) {
	r0, _, e1 := syscall.Syscall(__LoadLibraryExW.Addr(), 3, uintptr(unsafe.Pointer(libname)), uintptr(zero), uintptr(flags))
	handle = HANDLE(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func _LoadLibraryW(libname *uint16) (handle HANDLE, err error) {
	r0, _, e1 := syscall.Syscall(__LoadLibraryW.Addr(), 1, uintptr(unsafe.Pointer(libname)), 0, 0)
	handle = HANDLE(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func _SetThreadExecutionState(esFlags EXECUTION_STATE) (ret EXECUTION_STATE, err error) {
	r0, _, e1 := syscall.Syscall(__SetThreadExecutionState.Addr(), 1, uintptr(esFlags), 0, 0)
	ret = EXECUTION_STATE(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _FindWindowA(classname *byte, windowname *byte) (ret HWND, err error) {
	r0, _, e1 := syscall.Syscall(__FindWindowA.Addr(), 2, uintptr(unsafe.Pointer(classname)), uintptr(unsafe.Pointer(windowname)), 0)
	ret = HWND(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _FindWindoWExA(hWndParent HWND, hWndChildAfter HWND, lpszClass *byte, lpszWindow *byte) (ret HWND, err error) {
	r0, _, e1 := syscall.Syscall6(__FindWindowExA.Addr(), 4, uintptr(hWndParent), uintptr(hWndChildAfter), uintptr(unsafe.Pointer(lpszClass)), uintptr(unsafe.Pointer(lpszWindow)), 0, 0)
	ret = HWND(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _FindWindoWExW(hWndParent HWND, hWndChildAfter HWND, lpszClass *uint16, lpszWindow *uint16) (ret HWND, err error) {
	r0, _, e1 := syscall.Syscall6(__FindWindowExW.Addr(), 4, uintptr(hWndParent), uintptr(hWndChildAfter), uintptr(unsafe.Pointer(lpszClass)), uintptr(unsafe.Pointer(lpszWindow)), 0, 0)
	ret = HWND(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _FindWindowW(classname *uint16, windowname *uint16) (ret HWND, err error) {
	r0, _, e1 := syscall.Syscall(__FindWindowW.Addr(), 2, uintptr(unsafe.Pointer(classname)), uintptr(unsafe.Pointer(windowname)), 0)
	ret = HWND(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetClassNameA(hWnd HWND, lpClassName *byte, nMaxCount int) (len int32, err error) {
	r0, _, e1 := syscall.Syscall(__GetClassNameA.Addr(), 3, uintptr(hWnd), uintptr(unsafe.Pointer(lpClassName)), uintptr(nMaxCount))
	len = int32(r0)
	if len == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetClassNameW(hWnd HWND, lpClassName *uint16, nMaxCount int) (len int32, err error) {
	r0, _, e1 := syscall.Syscall(__GetClassNameW.Addr(), 3, uintptr(hWnd), uintptr(unsafe.Pointer(lpClassName)), uintptr(nMaxCount))
	len = int32(r0)
	if len == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetTopWindow(hWnd HWND) (ret HWND, err error) {
	r0, _, e1 := syscall.Syscall(__GetTopWindow.Addr(), 1, uintptr(hWnd), 0, 0)
	ret = HWND(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetWindow(hWnd HWND, uCmd uint) (ret HWND, err error) {
	r0, _, e1 := syscall.Syscall(__GetWindow.Addr(), 2, uintptr(hWnd), uintptr(uCmd), 0)
	ret = HWND(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetWindowTextA(hwnd HWND, str *byte, maxCount int32) (len int32, err error) {
	r0, _, e1 := syscall.Syscall(__GetWindowTextA.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(str)), uintptr(maxCount))
	len = int32(r0)
	if len == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetWindowTextLength(hwnd HWND) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall(__GetWindowTextLength.Addr(), 1, uintptr(hwnd), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetWindowTextW(hwnd HWND, str *uint16, maxCount int32) (len int32, err error) {
	r0, _, e1 := syscall.Syscall(__GetWindowTextW.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(str)), uintptr(maxCount))
	len = int32(r0)
	if len == 0 {
		err = errnoErr(e1)
	}
	return
}

func _GetWindowThreadProcessId(hwnd HWND, pid *uint32) (tid uint32, err error) {
	r0, _, e1 := syscall.Syscall(__GetWindowThreadProcessId.Addr(), 2, uintptr(hwnd), uintptr(unsafe.Pointer(pid)), 0)
	tid = uint32(r0)
	if tid == 0 {
		err = errnoErr(e1)
	}
	return
}

func _IsWindowVisible(hwnd HWND) (ret BOOL, err error) {
	r0, _, e1 := syscall.Syscall(__IsWindowVisible.Addr(), 1, uintptr(hwnd), 0, 0)
	ret = BOOL(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _MessageBoxA(hwnd HWND, text *byte, caption *byte, boxtype uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(__MessageBoxA.Addr(), 4, uintptr(hwnd), uintptr(unsafe.Pointer(text)), uintptr(unsafe.Pointer(caption)), uintptr(boxtype), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _MessageBoxW(hwnd HWND, text *uint16, caption *uint16, boxtype uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(__MessageBoxW.Addr(), 4, uintptr(hwnd), uintptr(unsafe.Pointer(text)), uintptr(unsafe.Pointer(caption)), uintptr(boxtype), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _PostMessageA(hwnd HWND, msg uint32, wParam WPARAM, lParam LPARAM) (ret BOOL, err error) {
	r0, _, e1 := syscall.Syscall6(__PostMessageA.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	ret = BOOL(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _PostMessageW(hwnd HWND, msg uint32, wParam WPARAM, lParam LPARAM) (ret BOOL, err error) {
	r0, _, e1 := syscall.Syscall6(__PostMessageW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	ret = BOOL(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _SendMessageA(hwnd HWND, msg uint32, wParam WPARAM, lParam LPARAM) (ret LRESULT, err error) {
	r0, _, e1 := syscall.Syscall6(__SendMessageA.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	ret = LRESULT(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _SendMessageW(hwnd HWND, msg uint32, wParam WPARAM, lParam LPARAM) (ret LRESULT, err error) {
	r0, _, e1 := syscall.Syscall6(__SendMessageW.Addr(), 4, uintptr(hwnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	ret = LRESULT(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _SetForegroundWindow(hWnd HWND) (ret BOOL, err error) {
	r0, _, e1 := syscall.Syscall(__SetForegroundWindow.Addr(), 1, uintptr(hWnd), 0, 0)
	ret = BOOL(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func _ShowWindow(hwnd HWND, cmdshow int) (ret BOOL, err error) {
	r0, _, e1 := syscall.Syscall(__ShowWindow.Addr(), 2, uintptr(hwnd), uintptr(cmdshow), 0)
	ret = BOOL(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}
